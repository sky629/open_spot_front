/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Open-Spot API
 * OpenAPI spec version: 1.0.0
 */
import type {
  ChangeLocationGroup200,
  ChangeLocationGroupRequest,
  CreateLocation201,
  CreateLocationRequest,
  DeleteLocation200,
  GetLocationById200,
  GetLocations200,
  GetLocationsByGroup200,
  GetLocationsByGroupParams,
  GetLocationsParams,
  GetMyLocations200,
  GetMyLocationsParams,
  GetRecentLocations200,
  GetRecentLocationsParams,
  GetTopRatedLocations200,
  GetTopRatedLocationsParams,
  UpdateLocation200,
  UpdateLocationCoordinates200,
  UpdateLocationCoordinatesRequest,
  UpdateLocationEvaluation200,
  UpdateLocationEvaluationRequest,
  UpdateLocationRequest
} from '.././model';

import { customAxiosInstance } from '../../axios-instance';



  export const getLocations = () => {
/**
 * 다양한 조건으로 장소를 검색합니다.
 * @summary 장소 목록 조회
 */
const getLocations = (
    params?: GetLocationsParams,
 ) => {
      return customAxiosInstance<GetLocations200>(
      {url: `/api/v1/locations`, method: 'GET',
        params
    },
      );
    }
  /**
 * 새로운 개인 장소를 등록합니다.
 * @summary 새 장소 생성
 */
const createLocation = (
    createLocationRequest: CreateLocationRequest,
 ) => {
      return customAxiosInstance<CreateLocation201>(
      {url: `/api/v1/locations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createLocationRequest
    },
      );
    }
  /**
 * 특정 장소의 상세 정보를 조회합니다.
 * @summary 장소 상세 조회
 */
const getLocationById = (
    locationId: string,
 ) => {
      return customAxiosInstance<GetLocationById200>(
      {url: `/api/v1/locations/${locationId}`, method: 'GET'
    },
      );
    }
  /**
 * 장소의 기본 정보를 수정합니다.
 * @summary 장소 기본 정보 수정
 */
const updateLocation = (
    locationId: string,
    updateLocationRequest: UpdateLocationRequest,
 ) => {
      return customAxiosInstance<UpdateLocation200>(
      {url: `/api/v1/locations/${locationId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateLocationRequest
    },
      );
    }
  /**
 * 장소를 비활성화합니다 (논리적 삭제).
 * @summary 장소 비활성화
 */
const deleteLocation = (
    locationId: string,
 ) => {
      return customAxiosInstance<DeleteLocation200>(
      {url: `/api/v1/locations/${locationId}`, method: 'DELETE'
    },
      );
    }
  /**
 * 장소에 대한 개인 평점, 리뷰, 태그를 수정합니다.
 * @summary 개인 평가 정보 수정
 */
const updateLocationEvaluation = (
    locationId: string,
    updateLocationEvaluationRequest: UpdateLocationEvaluationRequest,
 ) => {
      return customAxiosInstance<UpdateLocationEvaluation200>(
      {url: `/api/v1/locations/${locationId}/evaluation`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateLocationEvaluationRequest
    },
      );
    }
  /**
 * 장소가 속한 그룹을 변경합니다.
 * @summary 장소 그룹 변경
 */
const changeLocationGroup = (
    locationId: string,
    changeLocationGroupRequest: ChangeLocationGroupRequest,
 ) => {
      return customAxiosInstance<ChangeLocationGroup200>(
      {url: `/api/v1/locations/${locationId}/group`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: changeLocationGroupRequest
    },
      );
    }
  /**
 * 장소의 GPS 좌표를 수정합니다.
 * @summary 장소 좌표 수정
 */
const updateLocationCoordinates = (
    locationId: string,
    updateLocationCoordinatesRequest: UpdateLocationCoordinatesRequest,
 ) => {
      return customAxiosInstance<UpdateLocationCoordinates200>(
      {url: `/api/v1/locations/${locationId}/coordinates`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateLocationCoordinatesRequest
    },
      );
    }
  /**
 * 내 개인 평점 기준 최고 평점 장소 목록을 조회합니다.
 * @summary 최고 평점 장소 목록
 */
const getTopRatedLocations = (
    params?: GetTopRatedLocationsParams,
 ) => {
      return customAxiosInstance<GetTopRatedLocations200>(
      {url: `/api/v1/locations/top-rated`, method: 'GET',
        params
    },
      );
    }
  /**
 * 최근 등록한 내 장소 목록을 조회합니다.
 * @summary 최근 등록 장소 목록
 */
const getRecentLocations = (
    params?: GetRecentLocationsParams,
 ) => {
      return customAxiosInstance<GetRecentLocations200>(
      {url: `/api/v1/locations/recent`, method: 'GET',
        params
    },
      );
    }
  /**
 * 내가 생성한 모든 장소 목록을 조회합니다.
 * @summary 내 장소 목록
 */
const getMyLocations = (
    params?: GetMyLocationsParams,
 ) => {
      return customAxiosInstance<GetMyLocations200>(
      {url: `/api/v1/locations/self`, method: 'GET',
        params
    },
      );
    }
  /**
 * 특정 그룹에 속한 내 장소 목록을 조회합니다.
 * @summary 그룹별 장소 목록
 */
const getLocationsByGroup = (
    groupId: string | null,
    params?: GetLocationsByGroupParams,
 ) => {
      return customAxiosInstance<GetLocationsByGroup200>(
      {url: `/api/v1/locations/groups/${groupId}`, method: 'GET',
        params
    },
      );
    }
  return {getLocations,createLocation,getLocationById,updateLocation,deleteLocation,updateLocationEvaluation,changeLocationGroup,updateLocationCoordinates,getTopRatedLocations,getRecentLocations,getMyLocations,getLocationsByGroup}};
export type GetLocationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['getLocations']>>>
export type CreateLocationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['createLocation']>>>
export type GetLocationByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['getLocationById']>>>
export type UpdateLocationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['updateLocation']>>>
export type DeleteLocationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['deleteLocation']>>>
export type UpdateLocationEvaluationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['updateLocationEvaluation']>>>
export type ChangeLocationGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['changeLocationGroup']>>>
export type UpdateLocationCoordinatesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['updateLocationCoordinates']>>>
export type GetTopRatedLocationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['getTopRatedLocations']>>>
export type GetRecentLocationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['getRecentLocations']>>>
export type GetMyLocationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['getMyLocations']>>>
export type GetLocationsByGroupResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['getLocationsByGroup']>>>
