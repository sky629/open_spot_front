/**
 * Generated by orval 🍺
 * Do not edit manually.
 * Open-Spot API
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateLocation201,
  CreateLocationRequest,
  DeleteLocation200,
  GetLocationById200,
  GetLocations200,
  GetLocationsParams,
  GetMyLocations200,
  GetMyLocationsParams,
  UpdateLocation200,
  UpdateLocationRequest
} from '.././model';

import { customAxiosInstance } from '../../axios-instance';



  export const getLocations = () => {
/**
 * 다양한 조건으로 장소를 조회합니다.
- bounds 파라미터: 지도 영역 내 검색 (우선순위 1, groupId 함께 사용 가능)
- radius 파라미터: 반경 검색 (우선순위 2, groupId 함께 사용 가능)
- groupId: 그룹 필터 (우선순위 3, 기본 정렬: createdAt)
- categoryId: 카테고리 필터 (우선순위 4, 기본 정렬: createdAt)
- keyword: 키워드 검색 (우선순위 5, 기본 정렬: 관련도)
- sortBy: 정렬 기준 (기본 조회 시에만 적용, RATING 또는 CREATED_AT)
- targetUserId: 조회할 사용자 (미지정 시 본인, 어드민/친구 기능용)

 * @summary 장소 목록 조회 (어드민/일반 공용)
 */
const getLocations = (
    params?: GetLocationsParams,
 ) => {
      return customAxiosInstance<GetLocations200>(
      {url: `/api/v1/locations`, method: 'GET',
        params
    },
      );
    }
  /**
 * 새로운 개인 장소를 등록합니다.
 * @summary 새 장소 생성
 */
const createLocation = (
    createLocationRequest: CreateLocationRequest,
 ) => {
      return customAxiosInstance<CreateLocation201>(
      {url: `/api/v1/locations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createLocationRequest
    },
      );
    }
  /**
 * 특정 장소의 상세 정보를 조회합니다.
 * @summary 장소 상세 조회
 */
const getLocationById = (
    locationId: string,
 ) => {
      return customAxiosInstance<GetLocationById200>(
      {url: `/api/v1/locations/${locationId}`, method: 'GET'
    },
      );
    }
  /**
 * 장소의 모든 정보를 통합하여 수정합니다 (부분 업데이트 지원).
제공된 필드만 업데이트되며, null인 필드는 기존 값을 유지합니다.

수정 가능한 정보:
- 기본 정보: name, description, address, categoryId, iconUrl
- 평가 정보: rating, review, tags
- 그룹: groupId
- 좌표: coordinates (latitude, longitude는 함께 업데이트됨)

 * @summary 장소 정보 통합 수정
 */
const updateLocation = (
    locationId: string,
    updateLocationRequest: UpdateLocationRequest,
 ) => {
      return customAxiosInstance<UpdateLocation200>(
      {url: `/api/v1/locations/${locationId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateLocationRequest
    },
      );
    }
  /**
 * 장소를 비활성화합니다 (논리적 삭제).
 * @summary 장소 비활성화
 */
const deleteLocation = (
    locationId: string,
 ) => {
      return customAxiosInstance<DeleteLocation200>(
      {url: `/api/v1/locations/${locationId}`, method: 'DELETE'
    },
      );
    }
  /**
 * 내가 생성한 모든 장소 목록을 조회합니다.
- sortBy: 정렬 기준 (RATING: 평점순, CREATED_AT: 최근 등록순, 기본값: CREATED_AT)
- 본인의 장소만 조회 가능 (X-User-Id 자동 사용)

 * @summary 내 장소 목록 (일반 사용자용)
 */
const getMyLocations = (
    params?: GetMyLocationsParams,
 ) => {
      return customAxiosInstance<GetMyLocations200>(
      {url: `/api/v1/locations/self`, method: 'GET',
        params
    },
      );
    }
  return {getLocations,createLocation,getLocationById,updateLocation,deleteLocation,getMyLocations}};
export type GetLocationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['getLocations']>>>
export type CreateLocationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['createLocation']>>>
export type GetLocationByIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['getLocationById']>>>
export type UpdateLocationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['updateLocation']>>>
export type DeleteLocationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['deleteLocation']>>>
export type GetMyLocationsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLocations>['getMyLocations']>>>
