openapi: 3.1.1
info:
  title: Open-Spot API
  description: |
    개인 장소 기록 및 관리 서비스 API

    ## 주요 기능
    - Google OAuth2 인증 (Bearer Token + HttpOnly Cookie)
    - 개인 장소 기록 관리 (평점, 리뷰, 태그)
    - 장소 그룹 관리
    - 푸시 알림 관리

    ## 인증 방식
    - **Access Token**: Authorization 헤더로 전달 (Bearer 방식)
    - **Refresh Token**: HttpOnly Cookie로 전달 (XSS 방어)

    ## MSA 아키텍처
    - **Gateway (8080)**: 모든 API의 진입점, JWT 검증 수행
    - **Auth Service (8081)**: Google OAuth2 로그인, JWT 발급
    - **Location Service (8082)**: 장소 관리
    - **Notification Service (8083)**: 알림 관리

    **중요**: 프론트엔드는 반드시 Gateway(8080)를 통해 API를 호출해야 합니다.
  version: 1.0.0
  contact:
    name: Open-Spot Team

servers:
  - url: http://localhost:8080
    description: Gateway (모든 API 호출은 이 URL 사용)
  - url: http://localhost:8081
    description: Auth Service (직접 호출 금지, Gateway 경유 필수)
  - url: http://localhost:8082
    description: Location Service (직접 호출 금지, Gateway 경유 필수)
  - url: http://localhost:8083
    description: Notification Service (직접 호출 금지, Gateway 경유 필수)

tags:
  - name: Authentication
    description: 인증 관련 API
  - name: Users
    description: 사용자 관리 API
  - name: Categories
    description: 카테고리 API
  - name: Locations
    description: 장소 관리 API
  - name: Location Groups
    description: 장소 그룹 관리 API
  - name: Notifications
    description: 알림 관리 API

security:
  - BearerAuth: []

paths:
  # ========================================
  # Authentication APIs
  # ========================================
  /api/v1/auth/google/login:
    get:
      tags:
        - Authentication
      summary: Google OAuth2 로그인 시작
      description: |
        Google OAuth2 로그인 플로우를 시작합니다.
        로그인 성공 시 프론트엔드로 리다이렉트하며, Access Token은 URL 쿼리 파라미터로, Refresh Token은 HttpOnly 쿠키로 전달됩니다.

        **리다이렉트 예시**:
        `http://localhost:3000/auth/login/success?access_token=eyJhbGc...&new_user=false`

        **프론트엔드 처리**:
        1. URL 쿼리에서 `access_token` 추출
        2. 메모리 또는 localStorage에 저장
        3. 이후 API 요청 시 `Authorization: Bearer <access_token>` 헤더 사용
      operationId: googleLogin
      parameters:
        - name: redirect_uri
          in: query
          required: false
          schema:
            type: string
            format: uri
          description: 로그인 성공 후 리다이렉트할 URL (화이트리스트에 등록된 URL만 허용)
      security: []
      responses:
        '302':
          description: |
            Google 로그인 페이지로 리다이렉트 → 로그인 성공 시 프론트엔드로 리다이렉트
            - Access Token: URL 쿼리 파라미터 (`?access_token=xxx&new_user=false`)
            - Refresh Token: HttpOnly Cookie
          headers:
            Set-Cookie:
              description: |
                Refresh Token만 HttpOnly 쿠키로 설정됩니다:
                - refresh_token: JWT Refresh Token (7일, HttpOnly, Secure, SameSite=Strict)
              schema:
                type: string
                example: refresh_token=eyJhbGc...; HttpOnly; Secure; Path=/; SameSite=Strict; Max-Age=604800
            Location:
              description: 프론트엔드 리다이렉트 URL (Access Token 포함)
              schema:
                type: string
                example: http://localhost:3000/auth/login/success?access_token=eyJhbGc...&new_user=false

  /api/v1/auth/token/refresh:
    post:
      tags:
        - Authentication
      summary: JWT 토큰 갱신
      description: |
        HttpOnly 쿠키의 Refresh Token을 사용하여 새로운 Access Token을 발급받습니다.

        **요청**: Refresh Token은 자동으로 쿠키에서 읽힘
        **응답**:
        - Access Token: Response Body (프론트엔드에서 메모리 저장)
        - Refresh Token: HttpOnly Cookie (자동 갱신)

        **프론트엔드 처리**:
        1. Response Body에서 `accessToken` 추출
        2. 메모리 또는 localStorage에 저장
        3. 이후 API 요청 시 `Authorization: Bearer <accessToken>` 헤더 사용
      operationId: refreshToken
      security: []
      responses:
        '200':
          description: 토큰 갱신 성공 (Access Token은 Response Body, Refresh Token은 HttpOnly 쿠키)
          headers:
            Set-Cookie:
              description: |
                갱신된 Refresh Token만 HttpOnly 쿠키로 설정됩니다:
                - refresh_token: 새로운 Refresh Token (7일, HttpOnly, Secure, SameSite=Strict)
              schema:
                type: string
                example: refresh_token=eyJhbGc...; HttpOnly; Secure; Path=/; SameSite=Strict; Max-Age=604800
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TokenRefreshResponse'
              example:
                success: true
                data:
                  accessToken: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI...
                  accessTokenExpiresIn: 3600000
                  message: Token refreshed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: 로그아웃
      description: |
        Bearer Token을 검증하고 Redis의 Refresh Token을 무효화합니다.
        HttpOnly Cookie의 Refresh Token도 삭제됩니다.

        **요청**: `Authorization: Bearer <access-token>` 헤더 필요
        **응답**: Refresh Token 쿠키 삭제
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 로그아웃 성공 (Refresh Token 쿠키가 삭제됨)
          headers:
            Set-Cookie:
              description: |
                Refresh Token 쿠키가 삭제됩니다 (Max-Age=0):
                - refresh_token
              schema:
                type: string
                example: refresh_token=; HttpOnly; Secure; Path=/; SameSite=Strict; Max-Age=0
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LogoutResponse'
              example:
                success: true
                data:
                  message: Successfully logged out
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ========================================
  # Users APIs
  # ========================================
  /api/v1/users/self:
    get:
      tags:
        - Users
      summary: 현재 사용자 프로필 조회
      description: |
        Gateway에서 검증된 JWT의 사용자 ID로 프로필을 조회합니다.

        **인증 플로우**:
        1. 클라이언트 → Gateway: `Authorization: Bearer <token>`
        2. Gateway: JWT 검증 후 X-User-Id 헤더 추가
        3. Auth Service: X-User-Id 헤더로 사용자 식별
      operationId: getCurrentUser
      responses:
        '200':
          description: 사용자 프로필 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/users/{userId}:
    get:
      tags:
        - Users
      summary: 사용자 프로필 조회
      description: 특정 사용자 ID로 프로필을 조회합니다. (관리자 또는 친구 기능용)
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: 사용자 프로필 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # ========================================
  # Categories APIs
  # ========================================
  /api/v1/categories:
    get:
      tags:
        - Categories
      summary: 카테고리 목록 조회
      description: 사용 가능한 모든 장소 카테고리 목록을 조회합니다.
      operationId: getCategories
      security: []
      responses:
        '200':
          description: 카테고리 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/CategoryResponse'

  # ========================================
  # Locations APIs
  # ========================================
  /api/v1/locations:
    get:
      tags:
        - Locations
      summary: 장소 목록 조회 (어드민/일반 공용)
      description: |
        다양한 조건으로 장소를 조회합니다.
        - bounds 파라미터: 지도 영역 내 검색 (우선순위 1, groupId 함께 사용 가능)
        - radius 파라미터: 반경 검색 (우선순위 2, groupId 함께 사용 가능)
        - groupId: 그룹 필터 (우선순위 3, 기본 정렬: createdAt)
        - categoryId: 카테고리 필터 (우선순위 4, 기본 정렬: createdAt)
        - keyword: 키워드 검색 (우선순위 5, 기본 정렬: 관련도)
        - sortBy: 정렬 기준 (기본 조회 시에만 적용, RATING 또는 CREATED_AT)
        - targetUserId: 조회할 사용자 (미지정 시 본인, 어드민/친구 기능용)
      operationId: getLocations
      parameters:
        - $ref: '#/components/parameters/NorthEastLatParam'
        - $ref: '#/components/parameters/NorthEastLonParam'
        - $ref: '#/components/parameters/SouthWestLatParam'
        - $ref: '#/components/parameters/SouthWestLonParam'
        - $ref: '#/components/parameters/LatitudeParam'
        - $ref: '#/components/parameters/LongitudeParam'
        - $ref: '#/components/parameters/RadiusMetersParam'
        - $ref: '#/components/parameters/CategoryIdParam'
        - $ref: '#/components/parameters/GroupIdParam'
        - $ref: '#/components/parameters/KeywordParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/TargetUserIdParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: 장소 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LocationPageResponse'

    post:
      tags:
        - Locations
      summary: 새 장소 생성
      description: 새로운 개인 장소를 등록합니다.
      operationId: createLocation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocationRequest'
      responses:
        '201':
          description: 장소 생성 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LocationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/locations/{locationId}:
    get:
      tags:
        - Locations
      summary: 장소 상세 조회
      description: 특정 장소의 상세 정보를 조회합니다.
      operationId: getLocationById
      parameters:
        - $ref: '#/components/parameters/LocationIdParam'
      responses:
        '200':
          description: 장소 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LocationResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Locations
      summary: 장소 정보 통합 수정
      description: |
        장소의 모든 정보를 통합하여 수정합니다 (부분 업데이트 지원).
        제공된 필드만 업데이트되며, null인 필드는 기존 값을 유지합니다.

        수정 가능한 정보:
        - 기본 정보: name, description, address, categoryId, iconUrl
        - 평가 정보: rating, review, tags
        - 그룹: groupId
        - 좌표: coordinates (latitude, longitude는 함께 업데이트됨)
      operationId: updateLocation
      parameters:
        - $ref: '#/components/parameters/LocationIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocationRequest'
      responses:
        '200':
          description: 장소 수정 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LocationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Locations
      summary: 장소 비활성화
      description: 장소를 비활성화합니다 (논리적 삭제).
      operationId: deleteLocation
      parameters:
        - $ref: '#/components/parameters/LocationIdParam'
      responses:
        '200':
          description: 장소 비활성화 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          locationId:
                            type: string
                            format: uuid
                          message:
                            type: string
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/locations/self:
    get:
      tags:
        - Locations
      summary: 내 장소 목록 (일반 사용자용)
      description: |
        내가 생성한 모든 장소 목록을 조회합니다.
        - sortBy: 정렬 기준 (RATING: 평점순, CREATED_AT: 최근 등록순, 기본값: CREATED_AT)
        - 본인의 장소만 조회 가능 (X-User-Id 자동 사용)
      operationId: getMyLocations
      parameters:
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: 내 장소 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LocationPageResponse'

  /api/v1/locations/groups/{groupId}:
    put:
      tags:
        - Location Groups
      summary: 그룹 수정
      description: 그룹의 기본 정보를 수정합니다.
      operationId: updateLocationGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocationGroupRequest'
      responses:
        '200':
          description: 그룹 수정 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LocationGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Location Groups
      summary: 그룹 삭제
      description: 그룹을 삭제합니다.
      operationId: deleteLocationGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 그룹 삭제 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          groupId:
                            type: string
                            format: uuid
                          message:
                            type: string
        '404':
          $ref: '#/components/responses/NotFound'

  # ========================================
  # Location Groups APIs
  # ========================================
  /api/v1/locations/groups:
    get:
      tags:
        - Location Groups
      summary: 그룹 목록 조회
      description: 사용자의 모든 그룹 목록을 조회합니다.
      operationId: getLocationGroups
      responses:
        '200':
          description: 그룹 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/LocationGroupResponse'

    post:
      tags:
        - Location Groups
      summary: 그룹 생성
      description: 새로운 장소 그룹을 생성합니다.
      operationId: createLocationGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocationGroupRequest'
      responses:
        '201':
          description: 그룹 생성 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LocationGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/locations/groups/reorder:
    put:
      tags:
        - Location Groups
      summary: 그룹 순서 변경
      description: 드래그 앤 드롭으로 그룹 순서를 변경합니다.
      operationId: reorderLocationGroups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReorderLocationGroupsRequest'
      responses:
        '200':
          description: 그룹 순서 변경 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/LocationGroupResponse'

  # ========================================
  # Notifications APIs
  # ========================================
  /api/v1/notifications/tokens:
    post:
      tags:
        - Notifications
      summary: 디바이스 토큰 등록
      description: FCM 푸시 알림을 위한 디바이스 토큰을 등록합니다.
      operationId: registerDeviceToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTokenRequest'
      responses:
        '200':
          description: 토큰 등록 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RegisterTokenResponse'

  /api/v1/notifications:
    get:
      tags:
        - Notifications
      summary: 알림 목록 조회
      description: 사용자의 알림 목록을 페이지네이션으로 조회합니다.
      operationId: getNotifications
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: 알림 목록 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/NotificationPageResponse'

  /api/v1/notifications/unread-count:
    get:
      tags:
        - Notifications
      summary: 읽지 않은 알림 수 조회
      description: 사용자의 읽지 않은 알림 개수를 조회합니다.
      operationId: getUnreadNotificationCount
      responses:
        '200':
          description: 읽지 않은 알림 수 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UnreadCountResponse'

  /api/v1/notifications/{notificationId}/read:
    put:
      tags:
        - Notifications
      summary: 알림 읽음 처리
      description: 특정 알림을 읽음 상태로 변경합니다.
      operationId: markNotificationAsRead
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 알림 읽음 처리 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/notifications/settings:
    get:
      tags:
        - Notifications
      summary: 알림 설정 조회
      description: 사용자의 알림 설정을 조회합니다.
      operationId: getNotificationSettings
      responses:
        '200':
          description: 알림 설정 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/NotificationSettingsResponse'

    put:
      tags:
        - Notifications
      summary: 알림 설정 업데이트
      description: 사용자의 알림 설정을 업데이트합니다.
      operationId: updateNotificationSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSettingsRequest'
      responses:
        '200':
          description: 알림 설정 업데이트 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/NotificationSettingsResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Access Token을 Authorization 헤더로 전달합니다.

        **사용법**: `Authorization: Bearer <access-token>`

        **토큰 획득**:
        1. Google 로그인 성공 시 URL 쿼리 파라미터로 전달
        2. 토큰 갱신 API 응답 본문에서 획득

        **인증 플로우 (MSA 표준)**:
        1. 클라이언트 → Gateway: `Authorization: Bearer <token>` 헤더 포함
        2. Gateway: JWT 검증 (HS256 알고리즘)
        3. Gateway: 검증 성공 시 `X-User-Id` 헤더 추가
        4. 내부 서비스: `X-User-Id` 헤더로 사용자 식별 (JWT 검증 불필요)

  parameters:
    UserIdParam:
      name: userId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    LocationIdParam:
      name: locationId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    CategoryIdParam:
      name: categoryId
      in: query
      required: false
      schema:
        type: string
        format: uuid

    GroupIdParam:
      name: groupId
      in: query
      required: false
      schema:
        type: string
        format: uuid

    NorthEastLatParam:
      name: northEastLat
      in: query
      required: false
      schema:
        type: number
        format: double
        minimum: -90
        maximum: 90

    NorthEastLonParam:
      name: northEastLon
      in: query
      required: false
      schema:
        type: number
        format: double
        minimum: -180
        maximum: 180

    SouthWestLatParam:
      name: southWestLat
      in: query
      required: false
      schema:
        type: number
        format: double
        minimum: -90
        maximum: 90

    SouthWestLonParam:
      name: southWestLon
      in: query
      required: false
      schema:
        type: number
        format: double
        minimum: -180
        maximum: 180

    LatitudeParam:
      name: latitude
      in: query
      required: false
      schema:
        type: number
        format: double
        minimum: -90
        maximum: 90

    LongitudeParam:
      name: longitude
      in: query
      required: false
      schema:
        type: number
        format: double
        minimum: -180
        maximum: 180

    RadiusMetersParam:
      name: radiusMeters
      in: query
      required: false
      schema:
        type: number
        format: double
        minimum: 100
        maximum: 50000

    KeywordParam:
      name: keyword
      in: query
      required: false
      schema:
        type: string
        maxLength: 100

    SortByParam:
      name: sortBy
      in: query
      required: false
      schema:
        type: string
        enum: [RATING, CREATED_AT]
      description: |
        정렬 기준 (기본 조회 시에만 적용)
        - RATING: 평점 높은 순
        - CREATED_AT: 최근 등록순 (기본값)

    TargetUserIdParam:
      name: targetUserId
      in: query
      required: false
      schema:
        type: string
        format: uuid

    PageParam:
      name: page
      in: query
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0

    SizeParam:
      name: size
      in: query
      required: false
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100

  responses:
    BadRequest:
      description: 잘못된 요청
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: 인증 실패
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'

  schemas:
    # ========================================
    # Common Schemas
    # ========================================
    ApiResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        data:
          type: object
          nullable: true
        error:
          type: object
          nullable: true

    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string

    PageInfo:
      type: object
      required:
        - number
        - size
        - totalElements
        - totalPages
        - first
        - last
      properties:
        number:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        first:
          type: boolean
        last:
          type: boolean

    # ========================================
    # Authentication Schemas
    # ========================================
    TokenRefreshResponse:
      type: object
      required:
        - accessToken
        - accessTokenExpiresIn
        - message
      properties:
        accessToken:
          type: string
          description: 새로 발급된 JWT Access Token (프론트엔드 메모리에 저장)
          example: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI5ZjY3YzJmZi0zYjJhLTQ5NzUtYjEyZi1lNmM4ZDQwYjk3YjEiLCJleHAiOjE3MzA1NzI3MDAsImlhdCI6MTczMDU2OTEwMH0.xxx
        accessTokenExpiresIn:
          type: integer
          format: int64
          description: 액세스 토큰 만료 시간 (밀리초)
          example: 3600000
        message:
          type: string
          description: 토큰 갱신 성공 메시지
          example: Token refreshed successfully
      description: |
        토큰 갱신 응답.
        - Access Token: Response Body (프론트엔드에서 메모리/localStorage 저장)
        - Refresh Token: HttpOnly Cookie (자동 갱신)

    LogoutResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Successfully logged out

    # ========================================
    # User Schemas
    # ========================================
    UserResponse:
      type: object
      required:
        - id
        - socialId
        - email
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        socialId:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        pictureUrl:
          type: string
          format: uri
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # ========================================
    # Category Schemas
    # ========================================
    CategoryResponse:
      type: object
      required:
        - id
        - code
        - displayName
        - displayOrder
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        displayName:
          type: string
        description:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          nullable: true
        displayOrder:
          type: integer

    CategoryInfo:
      type: object
      required:
        - id
        - code
        - displayName
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        displayName:
          type: string
        icon:
          type: string
          nullable: true
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          nullable: true

    # ========================================
    # Location Schemas
    # ========================================
    CoordinatesResponse:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double

    CreateLocationRequest:
      type: object
      required:
        - name
        - categoryId
        - latitude
        - longitude
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 1000
          nullable: true
        address:
          type: string
          maxLength: 200
          nullable: true
        categoryId:
          type: string
          format: uuid
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
        iconUrl:
          type: string
          format: uri
          maxLength: 500
          nullable: true
        rating:
          type: number
          format: double
          minimum: 0.5
          maximum: 5.0
          multipleOf: 0.5
          nullable: true
        review:
          type: string
          maxLength: 2000
          nullable: true
        tags:
          type: array
          maxItems: 10
          items:
            type: string
            maxLength: 20
        groupId:
          type: string
          format: uuid
          nullable: true

    UpdateLocationRequest:
      type: object
      description: |
        장소 통합 수정 요청 (부분 업데이트).
        모든 필드는 optional이며, 제공된 필드만 업데이트됩니다.
      properties:
        # 기본 정보
        name:
          type: string
          maxLength: 100
          nullable: true
        description:
          type: string
          maxLength: 1000
          nullable: true
        address:
          type: string
          maxLength: 200
          nullable: true
        categoryId:
          type: string
          format: uuid
          nullable: true
        iconUrl:
          type: string
          format: uri
          maxLength: 500
          nullable: true

        # 평가 정보
        rating:
          type: number
          format: double
          minimum: 0.5
          maximum: 5.0
          multipleOf: 0.5
          nullable: true
        review:
          type: string
          maxLength: 2000
          nullable: true
        tags:
          type: array
          maxItems: 10
          items:
            type: string
            maxLength: 20
          nullable: true

        # 그룹
        groupId:
          type: string
          format: uuid
          nullable: true

        # 좌표 (함께 업데이트되어야 함)
        coordinates:
          $ref: '#/components/schemas/CoordinatesRequest'

    CoordinatesRequest:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180

    LocationResponse:
      type: object
      required:
        - id
        - userId
        - name
        - categoryId
        - category
        - coordinates
        - isActive
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        categoryId:
          type: string
          format: uuid
        category:
          $ref: '#/components/schemas/CategoryInfo'
        coordinates:
          $ref: '#/components/schemas/CoordinatesResponse'
        iconUrl:
          type: string
          format: uri
          nullable: true
        rating:
          type: number
          format: double
          minimum: 0.5
          maximum: 5.0
          multipleOf: 0.5
          nullable: true
        review:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
        groupId:
          type: string
          format: uuid
          nullable: true
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        distance:
          type: number
          format: double
          nullable: true

    LocationPageResponse:
      type: object
      required:
        - content
        - page
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/LocationResponse'
        page:
          $ref: '#/components/schemas/PageInfo'

    # ========================================
    # Location Group Schemas
    # ========================================
    CreateLocationGroupRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
          nullable: true
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          nullable: true
        icon:
          type: string
          maxLength: 50
          nullable: true

    UpdateLocationGroupRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
          nullable: true
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          nullable: true
        icon:
          type: string
          maxLength: 50
          nullable: true

    ReorderLocationGroupsRequest:
      type: object
      required:
        - groupOrders
      properties:
        groupOrders:
          type: array
          items:
            $ref: '#/components/schemas/GroupOrderItem'

    GroupOrderItem:
      type: object
      required:
        - groupId
        - displayOrder
      properties:
        groupId:
          type: string
          format: uuid
        displayOrder:
          type: integer
          minimum: 0

    LocationGroupResponse:
      type: object
      required:
        - id
        - userId
        - name
        - displayOrder
        - isShared
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
        displayOrder:
          type: integer
        isShared:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # ========================================
    # Notification Schemas
    # ========================================
    RegisterTokenRequest:
      type: object
      required:
        - token
        - deviceType
      properties:
        token:
          type: string
        deviceType:
          type: string
          enum: [WEB, ANDROID, IOS]
        deviceId:
          type: string
          nullable: true

    RegisterTokenResponse:
      type: object
      required:
        - id
        - token
        - deviceType
        - isActive
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
        deviceType:
          type: string
          enum: [WEB, ANDROID, IOS]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    NotificationResponse:
      type: object
      required:
        - id
        - title
        - body
        - notificationType
        - isRead
        - isSent
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        body:
          type: string
        notificationType:
          type: string
          enum: [REPORT_COMPLETE, SYSTEM_NOTICE]
        referenceId:
          type: string
          format: uuid
          nullable: true
        isRead:
          type: boolean
        isSent:
          type: boolean
        createdAt:
          type: string
          format: date-time
        readAt:
          type: string
          format: date-time
          nullable: true

    NotificationPageResponse:
      type: object
      required:
        - content
        - page
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/NotificationResponse'
        page:
          $ref: '#/components/schemas/PageInfo'

    UnreadCountResponse:
      type: object
      required:
        - unreadCount
      properties:
        unreadCount:
          type: integer
          format: int64

    NotificationSettingsResponse:
      type: object
      required:
        - reportEnabled
        - systemEnabled
      properties:
        reportEnabled:
          type: boolean
        systemEnabled:
          type: boolean

    UpdateSettingsRequest:
      type: object
      required:
        - reportEnabled
        - systemEnabled
      properties:
        reportEnabled:
          type: boolean
        systemEnabled:
          type: boolean
