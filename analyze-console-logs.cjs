const { chromium } = require('playwright');

async function analyzeConsoleLogss() {
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  // Console message ÏàòÏßë
  const consoleMessages = [];
  const networkRequests = [];
  const errors = [];

  // Console Î©îÏãúÏßÄ Ï∫êÏπò
  page.on('console', msg => {
    const msgType = msg.type();
    const text = msg.text();
    consoleMessages.push({
      type: msgType,
      text: text,
      timestamp: new Date().toISOString()
    });

    console.log(`üìä [${msgType.toUpperCase()}] ${text}`);
  });

  // ÏóêÎü¨ Ï∫êÏπò
  page.on('pageerror', error => {
    errors.push({
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    console.log(`‚ùå [PAGE ERROR] ${error.message}`);
  });

  // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠ Î™®ÎãàÌÑ∞ÎßÅ
  page.on('request', request => {
    networkRequests.push({
      url: request.url(),
      method: request.method(),
      timestamp: new Date().toISOString()
    });
  });

  page.on('response', response => {
    if (!response.ok()) {
      console.log(`üåê [NETWORK ERROR] ${response.status()} ${response.url()}`);
    }
  });

  try {
    console.log('üöÄ Navigating to login page...');
    await page.goto('http://localhost:3000/login', {
      waitUntil: 'networkidle',
      timeout: 30000
    });

    console.log('‚úÖ Page loaded successfully');

    // ÌéòÏù¥ÏßÄÍ∞Ä ÏôÑÏ†ÑÌûà Î°úÎìúÎê† ÎïåÍπåÏßÄ Í∏∞Îã§Î¶º
    await page.waitForTimeout(3000);

    // React Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä ÎßàÏö¥Ìä∏Îê† ÎïåÍπåÏßÄ Í∏∞Îã§Î¶º
    try {
      await page.waitForSelector('[data-testid="login-page"], .login-page, h1', { timeout: 5000 });
      console.log('‚úÖ Login page elements found');
    } catch (e) {
      console.log('‚ö†Ô∏è  Login page elements not found, but continuing...');
    }

    // Ï∂îÍ∞ÄÎ°ú Ïû†Ïãú Îçî Í∏∞Îã§Î†§ÏÑú Î™®Îì† Î°úÍ∑∏ ÏàòÏßë
    await page.waitForTimeout(2000);

    console.log('\nüìã CONSOLE ANALYSIS SUMMARY');
    console.log('='.repeat(50));

    if (consoleMessages.length === 0) {
      console.log('‚úÖ No console messages found');
    } else {
      const errorMsgs = consoleMessages.filter(msg => msg.type === 'error');
      const warnMsgs = consoleMessages.filter(msg => msg.type === 'warning');
      const infoMsgs = consoleMessages.filter(msg => msg.type === 'info' || msg.type === 'log');

      if (errorMsgs.length > 0) {
        console.log(`\n‚ùå ERRORS (${errorMsgs.length}):`);
        errorMsgs.forEach((msg, i) => {
          console.log(`  ${i + 1}. ${msg.text}`);
        });
      }

      if (warnMsgs.length > 0) {
        console.log(`\n‚ö†Ô∏è  WARNINGS (${warnMsgs.length}):`);
        warnMsgs.forEach((msg, i) => {
          console.log(`  ${i + 1}. ${msg.text}`);
        });
      }

      if (infoMsgs.length > 0) {
        console.log(`\nüìã INFO/LOG (${infoMsgs.length}):`);
        infoMsgs.forEach((msg, i) => {
          console.log(`  ${i + 1}. ${msg.text}`);
        });
      }
    }

    if (errors.length > 0) {
      console.log(`\nüí• PAGE ERRORS (${errors.length}):`);
      errors.forEach((error, i) => {
        console.log(`  ${i + 1}. ${error.message}`);
        if (error.stack) {
          console.log(`     Stack: ${error.stack.split('\n')[0]}`);
        }
      });
    }

    // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠ Ï§ë Ïã§Ìå®Ìïú Í≤ÉÎì§ Ï≤¥ÌÅ¨
    const failedRequests = networkRequests.filter(req =>
      req.url.includes('localhost:8080') ||
      req.url.includes('/api/') ||
      req.url.includes('google')
    );

    if (failedRequests.length > 0) {
      console.log(`\nüåê RELEVANT NETWORK REQUESTS (${failedRequests.length}):`);
      failedRequests.forEach((req, i) => {
        console.log(`  ${i + 1}. ${req.method} ${req.url}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  } finally {
    console.log('\nüèÅ Analysis complete. Browser will stay open for 10 seconds...');
    await page.waitForTimeout(10000);
    await browser.close();
  }
}

analyzeConsoleLogss().catch(console.error);